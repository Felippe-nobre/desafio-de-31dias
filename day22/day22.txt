Bem-vindo ao mundo do ORM!
Manipular bancos de dados usando SQL √© poderoso, mas pode ser trabalhoso quando estamos desenvolvendo aplica√ß√µes grandes. √â aqui que entra o ORM (Object-Relational Mapping), uma ferramenta que simplifica o trabalho com bancos de dados relacionais.
Neste t√≥pico, voc√™ aprender√°:
O que √© ORM e para que serve.
Como instalar e configurar o Sequelize, um dos ORMs mais usados no JavaScript.
Como realizar opera√ß√µes CRUD usando o Sequelize.
üìå O que √© ORM?
ORM (Object-Relational Mapping) √© uma t√©cnica que permite interagir com bancos de dados relacionais usando c√≥digo em vez de escrever comandos SQL diretamente.
üí° Benef√≠cios do ORM:
Reduz a quantidade de SQL que voc√™ precisa escrever.
Oferece valida√ß√µes e associa√ß√µes entre tabelas diretamente no c√≥digo.
Torna o c√≥digo mais leg√≠vel e f√°cil de manter.
üìã Como funciona o ORM?
O ORM funciona como um tradutor entre o c√≥digo da aplica√ß√£o e o banco de dados:
Voc√™ define modelos (classes) que representam as tabelas do banco de dados.
Usa m√©todos para manipular os dados, como create(), findAll(), update(), e destroy().
O ORM converte esses m√©todos em comandos SQL para o banco de dados executar.
üí° Exemplo b√°sico:
Em vez de escrever:
SELECT * FROM usuarios WHERE idade > 30;
‚Äã
No ORM, voc√™ escreveria:
Usuario.findAll({ where: { idade: { [Op.gt]: 30 } } });
‚Äã
‚öôÔ∏è Instalando e Configurando o Sequelize
Passo 1: Instalar Depend√™ncias
No terminal, execute:
npm install sequelize pg pg-hstore
‚Äã
üí° Explica√ß√£o:
sequelize: A biblioteca ORM.
pg e pg-hstore: Drivers para conectar ao PostgreSQL.
Passo 2: Configurar o Sequelize
Crie um arquivo database.js na pasta do seu projeto:
const { Sequelize } = require('sequelize');

// Conectando ao banco de dados PostgreSQL
const sequelize = new Sequelize('crud', 'postgres', 'senha123', {
  host: 'localhost',
  dialect: 'postgres',
});

module.exports = sequelize;
‚Äã
üí° Explica√ß√£o:
Substitua 'desafio', 'postgres', e 'senha123' com os detalhes do seu banco.
O par√¢metro dialect indica o tipo de banco usado (PostgreSQL, neste caso).
üõ†Ô∏è Criando um Modelo
Vamos criar um modelo para representar a tabela usuarios.
Crie um arquivo chamado Usuario.js:
const { DataTypes } = require('sequelize');
const sequelize = require('./database');

const Usuario = sequelize.define('Usuario', {
  nome: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  idade: {
    type: DataTypes.INTEGER,
  },
});

module.exports = Usuario;
‚Äã
üí° Explica√ß√£o:
DataTypes.STRING: Define o tipo de dado da coluna como texto.
allowNull: false: Indica que o campo √© obrigat√≥rio.
unique: true: Garante que os e-mails sejam √∫nicos.
üîÑ Sincronizando com o Banco
Antes de realizar opera√ß√µes, precisamos garantir que o modelo esteja sincronizado com o banco.
Crie um arquivo sync.js para sincronizar:
const sequelize = require('./database');
const Usuario = require('./Usuario');

async function sincronizarBanco() {
  try {
    await sequelize.sync({ force: true }); // Cria as tabelas
    console.log('Banco sincronizado com sucesso!');
  } catch (error) {
    console.error('Erro ao sincronizar o banco:', error);
  } finally {
    sequelize.close();
  }
}

sincronizarBanco();
‚Äã
Execute o arquivo:
node sync.js
‚Äã
üìã CRUD com Sequelize
Agora vamos implementar as opera√ß√µes CRUD com o modelo Usuario.
1. Create (Criar)
Crie um arquivo create.js:
const Usuario = require('./Usuario');

async function criarUsuarios() {
  try {
    await Usuario.create({ nome: 'Jo√£o Silva', email: 'joao@email.com', idade: 30 });
    await Usuario.create({ nome: 'Maria Oliveira', email: 'maria@email.com', idade: 28 });
    console.log('Usu√°rios criados com sucesso!');
  } catch (error) {
    console.error('Erro ao criar usu√°rios:', error);
  }
}

criarUsuarios();
‚Äã
2. Read (Ler)
Crie um arquivo read.js:
const Usuario = require('./Usuario');

async function listarUsuarios() {
  try {
    const usuarios = await Usuario.findAll();
    console.log(usuarios);
  } catch (error) {
    console.error('Erro ao listar usu√°rios:', error);
  }
}

listarUsuarios();
‚Äã
üí° Leitura com Filtros:
const usuariosFiltrados = await Usuario.findAll({
  where: { idade: { [Sequelize.Op.gt]: 30 } },
});
‚Äã
3. Update (Atualizar)
Crie um arquivo update.js:
const Usuario = require('./Usuario');

async function atualizarUsuario() {
  try {
    await Usuario.update(
      { idade: 35 },
      { where: { nome: 'Jo√£o Silva' } }
    );
    console.log('Usu√°rio atualizado com sucesso!');
  } catch (error) {
    console.error('Erro ao atualizar usu√°rio:', error);
  }
}

atualizarUsuario();
‚Äã
4. Delete (Deletar)
Crie um arquivo delete.js:
const Usuario = require('./Usuario');

async function deletarUsuario() {
  try {
    await Usuario.destroy({ where: { nome: 'Maria Oliveira' } });
    console.log('Usu√°rio deletado com sucesso!');
  } catch (error) {
    console.error('Erro ao deletar usu√°rio:', error);
  }
}

deletarUsuario();