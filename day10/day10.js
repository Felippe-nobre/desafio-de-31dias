class Carro{
    constructor(marca, modelo, cor){
        this.marca = marca;
        this.modelo = modelo;
        this.cor = cor;
    }

    acelerar(){
        console.log(`${this.marca} - ${this.modelo} est√° acelerando`);
    }
}

const carro1 = new Carro("Toyta", "Corolla", "Preto");
carro1.acelerar();
const carro2 = new Carro("Honda", "Civic", "Branco");
carro2.acelerar();

/* 
### **Introdu√ß√£o**

Bem-vindo ao **d√©cimo dia do desafio!** üéâ Hoje vamos entrar no mundo da **Programa√ß√£o Orientada a Objetos (POO)** e explorar os conceitos de **Classes e Objetos**.

Na vida real, vemos objetos ao nosso redor: carros, pessoas, animais. Cada objeto tem **caracter√≠sticas** (atributos) e **a√ß√µes** (m√©todos). Na programa√ß√£o, usamos **classes** para descrever essas caracter√≠sticas e a√ß√µes, e os **objetos** s√£o as inst√¢ncias dessas classes.

Vamos aprender como criar e usar classes e objetos no JavaScript, com exemplos pr√°ticos para solidificar o aprendizado. üöÄ

---

### **üìö O Que S√£o Classes e Objetos?**

- **Classe:** √â o "molde" ou "modelo" que define as caracter√≠sticas (atributos) e comportamentos (m√©todos) de um objeto.
- **Objeto:** √â a **inst√¢ncia** de uma classe, ou seja, algo criado a partir do molde.

üí° **Exemplo no mundo real:**

- Classe: **Carro** (com atributos como marca, modelo e cor, e m√©todos como acelerar e frear).
- Objeto: Um **carro espec√≠fico**, como "Toyota Corolla branco".

üìå **Exemplo no c√≥digo:**

```jsx
class Carro {
  constructor(marca, modelo, cor) {
    this.marca = marca; // Atributo
    this.modelo = modelo;
    this.cor = cor;
  }

  acelerar() { // M√©todo
    console.log(`${this.marca} est√° acelerando! üöóüí®`);
  }
}

const meuCarro = new Carro("Toyota", "Corolla", "Branco");
meuCarro.acelerar(); // Sa√≠da: Toyota est√° acelerando! üöóüí®
```

---

### **üîç Como Criar Classes no JavaScript**

### **1. Declarando uma Classe**

Use a palavra-chave `class` para declarar uma classe:

```jsx
class Pessoa {
  constructor(nome, idade) {
    this.nome = nome;
    this.idade = idade;
  }

  apresentar() {
    console.log(`Ol√°, meu nome √© ${this.nome} e tenho ${this.idade} anos.`);
  }
}
```

### **2. Criando Objetos**

Use a palavra-chave `new` para criar uma inst√¢ncia (objeto) de uma classe:

```jsx
const pessoa1 = new Pessoa("Jo√£o", 25);
pessoa1.apresentar(); // Sa√≠da: Ol√°, meu nome √© Jo√£o e tenho 25 anos.
```

---

### **üîÑ Atributos e M√©todos**

- **Atributos:** S√£o as caracter√≠sticas do objeto.
- **M√©todos:** S√£o as fun√ß√µes dentro da classe que representam a√ß√µes.

üìå **Exemplo:**

```jsx
class Animal {
  constructor(nome, especie) {
    this.nome = nome;  // Atributo
    this.especie = especie;
  }

  fazerSom() { // M√©todo
    console.log(`${this.nome} est√° fazendo um som! üêæ`);
  }
}

const cachorro = new Animal("Rex", "Cachorro");
cachorro.fazerSom(); // Sa√≠da: Rex est√° fazendo um som! üêæ
```

---

### **üíª Exemplos Pr√°ticos**

**Criando uma Classe para um Produto:**

```jsx
class Produto {
  constructor(nome, preco) {
    this.nome = nome;
    this.preco = preco;
  }

  exibirDetalhes() {
    console.log(`${this.nome} custa R$${this.preco}.`);
  }
}

const produto1 = new Produto("Celular", 1500);
produto1.exibirDetalhes(); // Sa√≠da: Celular custa R$1500.

```

**Classe com M√©todo para C√°lculo:**

```jsx
class Retangulo {
  constructor(largura, altura) {
    this.largura = largura;
    this.altura = altura;
  }

  calcularArea() {
    return this.largura * this.altura;
  }
}

const retangulo = new Retangulo(5, 10);
console.log(`√Årea: ${retangulo.calcularArea()}`); // Sa√≠da: √Årea: 50
```

**Criando um Banco de Dados Simples:**

```jsx
class BancoDeDados {
  constructor() {
    this.dados = [];
  }

  adicionar(dado) {
    this.dados.push(dado);
    console.log("Dado adicionado!");
  }

  listar() {
    console.log(this.dados);
  }
}

const bd = new BancoDeDados();
bd.adicionar("Cliente 1");
bd.listar(); // Sa√≠da: ["Cliente 1"]
```

---

### **üéØ Exerc√≠cios Pr√°ticos**

1. Crie uma classe chamada `Livro` com atributos `titulo`, `autor` e `ano`. Adicione um m√©todo para exibir os detalhes do livro.
2. Implemente uma classe `ContaBancaria` com os m√©todos `depositar` e `sacar`.
3. Crie uma classe `Pessoa` com um m√©todo que exibe "Bem-vindo, [nome]!".
4. Implemente uma classe `Calculadora` com m√©todos para soma, subtra√ß√£o, multiplica√ß√£o e divis√£o.
5. Crie uma classe `Agenda` para armazenar e exibir contatos.

*/